"""
    Copyright 2022 Continental Corporation

    This file contains up to four methods that will be called by the test framework:
        - global_setup(): Will be called before ALL test-cases
        - setup(): Will be called before EACH test-case
        - teardown(): Will be called after EACH test-case. Will also be called if test-case fails.
        - global_teardown(): Will be called after ALL test-cases.
                             Will be called if any execution before fails.

    In this setup file the executables will not start automaticly in a subprocess.
    The user must start the following executables first:
        - databridge.exe
        - controlbridge.exe
        - Next_Player.exe

    :file: setup_without_subprocess.pytest

    :author:
        - Fabian Janker (uif41320) <fabian.janker@continental-corporation.com>
"""

from helper_files.ControlBridge import controlbridge_Variables
from helper_files.DataBridge import databridge_Variables
from next_api_path import path_import_extension
from py_api.websocket import websocket_sync
from ptf.ptf_utils.global_params import get_parameter, set_global_parameter


def global_setup():
    """
    This method will be called before ALL test-cases are executed.

    You can set global variables with :func:`set_global_parameter`.
    Will skip execution of tests if this method fails.
    """
    # creating a websocket to the controlbridge
    controlbridge_websocket = websocket_sync.Handler(
        controlbridge_Variables.CONTROLBRIDGE_IP_ADDRESS, controlbridge_Variables.CONTROLBRIDGE_PORT
    )
    # creating a websocket to the databridge
    databridge_websocket = websocket_sync.Handler(
        controlbridge_Variables.CONTROLBRIDGE_IP_ADDRESS, databridge_Variables.DATABRIDGE_PORT
    )
    # creating a websocket to the broadcast of the databridge
    databridge_broadcast_websocket = websocket_sync.Handler(
        databridge_Variables.DATABRIDGE_IP_ADDRESS, databridge_Variables.DATABRIDGE_BROADCAST_PORT
    )

    # set up the global parameters for the websockets
    set_global_parameter("controlbridge_websocket", controlbridge_websocket)
    set_global_parameter("databridge_websocket", databridge_websocket)
    set_global_parameter("databridge_broadcast_websocket", databridge_broadcast_websocket)


def global_teardown():
    """
    This method will be called after ALL test-cases are executed.

    You can access global variables with :func:`get_parameter`.
    Guaranteed to be called, even if any test or global setup fails.
    """
    # getting the websockets
    controlbridge_websocket = get_parameter("controlbridge_websocket")
    databridge_websocket = get_parameter("databridge_websocket")
    databridge_broadcast_websocket = get_parameter("databridge_broadcast_websocket")

    # closing the websocket
    controlbridge_websocket.close()
    databridge_websocket.close()
    databridge_broadcast_websocket.close()


def setup():
    """
    This method will be called before EACH test-case is executed.

    You can set local variables just available for the next test-case
    using :func:`set_local_parameter`.

    You can access global variables with :func:`get_parameter`.

    Will skip execution of test if this method fails.
    Skipped if global setup fails.
    """
    pass


def teardown():
    """
    This method will be called after EACH testcase is executed.

    You can access global variables with :func:`get_parameter`.

    Guaranteed to be called, even if the test or setup fails.
    Skipped if global setup fails.
    """
    # getting the websocket
    controlbridge_websocket = get_parameter("controlbridge_websocket")
    databridge_broadcast_websocket = get_parameter("databridge_broadcast_websocket")

    controlbridge_websocket.dump_cache()
    databridge_broadcast_websocket.dump_cache()
