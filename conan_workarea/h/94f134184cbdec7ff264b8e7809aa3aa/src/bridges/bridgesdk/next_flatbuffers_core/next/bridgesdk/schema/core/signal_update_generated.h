// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGNALUPDATE_CORE_H_
#define FLATBUFFERS_GENERATED_SIGNALUPDATE_CORE_H_

#include "flatbuffers/flatbuffers.h"

#include "next/bridgesdk/schema/core/types_generated.h"
#include "next/bridgesdk/schema/core/meta_info_generated.h"
#include "next/bridgesdk/schema/core/signal_generated.h"

namespace Core {

struct SignalUpdate;
struct SignalUpdateBuilder;
struct SignalUpdateT;

struct SignalUpdateT : public flatbuffers::NativeTable {
  typedef SignalUpdate TableType;
  std::unique_ptr<Core::MetaInformationT> meta{};
  std::unique_ptr<Core::SignalListT> signal_list{};
  SignalUpdateT() = default;
  SignalUpdateT(const SignalUpdateT &o);
  SignalUpdateT(SignalUpdateT&&) FLATBUFFERS_NOEXCEPT = default;
  SignalUpdateT &operator=(SignalUpdateT o) FLATBUFFERS_NOEXCEPT;
};

struct SignalUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SignalUpdateT NativeTableType;
  typedef SignalUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_META = 4,
    VT_SIGNAL_LIST = 6
  };
  const Core::MetaInformation *meta() const {
    return GetPointer<const Core::MetaInformation *>(VT_META);
  }
  const Core::SignalList *signal_list() const {
    return GetPointer<const Core::SignalList *>(VT_SIGNAL_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_META) &&
           verifier.VerifyTable(meta()) &&
           VerifyOffset(verifier, VT_SIGNAL_LIST) &&
           verifier.VerifyTable(signal_list()) &&
           verifier.EndTable();
  }
  SignalUpdateT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SignalUpdateT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SignalUpdate> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SignalUpdateT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SignalUpdateBuilder {
  typedef SignalUpdate Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_meta(flatbuffers::Offset<Core::MetaInformation> meta) {
    fbb_.AddOffset(SignalUpdate::VT_META, meta);
  }
  void add_signal_list(flatbuffers::Offset<Core::SignalList> signal_list) {
    fbb_.AddOffset(SignalUpdate::VT_SIGNAL_LIST, signal_list);
  }
  explicit SignalUpdateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SignalUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SignalUpdate>(end);
    return o;
  }
};

inline flatbuffers::Offset<SignalUpdate> CreateSignalUpdate(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Core::MetaInformation> meta = 0,
    flatbuffers::Offset<Core::SignalList> signal_list = 0) {
  SignalUpdateBuilder builder_(_fbb);
  builder_.add_signal_list(signal_list);
  builder_.add_meta(meta);
  return builder_.Finish();
}

flatbuffers::Offset<SignalUpdate> CreateSignalUpdate(flatbuffers::FlatBufferBuilder &_fbb, const SignalUpdateT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SignalUpdateT::SignalUpdateT(const SignalUpdateT &o)
      : meta((o.meta) ? new Core::MetaInformationT(*o.meta) : nullptr),
        signal_list((o.signal_list) ? new Core::SignalListT(*o.signal_list) : nullptr) {
}

inline SignalUpdateT &SignalUpdateT::operator=(SignalUpdateT o) FLATBUFFERS_NOEXCEPT {
  std::swap(meta, o.meta);
  std::swap(signal_list, o.signal_list);
  return *this;
}

inline SignalUpdateT *SignalUpdate::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SignalUpdateT>(new SignalUpdateT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SignalUpdate::UnPackTo(SignalUpdateT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = meta(); if (_e) { if(_o->meta) { _e->UnPackTo(_o->meta.get(), _resolver); } else { _o->meta = std::unique_ptr<Core::MetaInformationT>(_e->UnPack(_resolver)); } } }
  { auto _e = signal_list(); if (_e) { if(_o->signal_list) { _e->UnPackTo(_o->signal_list.get(), _resolver); } else { _o->signal_list = std::unique_ptr<Core::SignalListT>(_e->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<SignalUpdate> SignalUpdate::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SignalUpdateT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSignalUpdate(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SignalUpdate> CreateSignalUpdate(flatbuffers::FlatBufferBuilder &_fbb, const SignalUpdateT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SignalUpdateT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _meta = _o->meta ? CreateMetaInformation(_fbb, _o->meta.get(), _rehasher) : 0;
  auto _signal_list = _o->signal_list ? CreateSignalList(_fbb, _o->signal_list.get(), _rehasher) : 0;
  return Core::CreateSignalUpdate(
      _fbb,
      _meta,
      _signal_list);
}

inline const Core::SignalUpdate *GetSignalUpdate(const void *buf) {
  return flatbuffers::GetRoot<Core::SignalUpdate>(buf);
}

inline const Core::SignalUpdate *GetSizePrefixedSignalUpdate(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Core::SignalUpdate>(buf);
}

inline const char *SignalUpdateIdentifier() {
  return "SU01";
}

inline bool SignalUpdateBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SignalUpdateIdentifier());
}

inline bool SizePrefixedSignalUpdateBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SignalUpdateIdentifier(), true);
}

inline bool VerifySignalUpdateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Core::SignalUpdate>(SignalUpdateIdentifier());
}

inline bool VerifySizePrefixedSignalUpdateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Core::SignalUpdate>(SignalUpdateIdentifier());
}

inline void FinishSignalUpdateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Core::SignalUpdate> root) {
  fbb.Finish(root, SignalUpdateIdentifier());
}

inline void FinishSizePrefixedSignalUpdateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Core::SignalUpdate> root) {
  fbb.FinishSizePrefixed(root, SignalUpdateIdentifier());
}

inline std::unique_ptr<Core::SignalUpdateT> UnPackSignalUpdate(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Core::SignalUpdateT>(GetSignalUpdate(buf)->UnPack(res));
}

inline std::unique_ptr<Core::SignalUpdateT> UnPackSizePrefixedSignalUpdate(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Core::SignalUpdateT>(GetSizePrefixedSignalUpdate(buf)->UnPack(res));
}

}  // namespace Core

#endif  // FLATBUFFERS_GENERATED_SIGNALUPDATE_CORE_H_
