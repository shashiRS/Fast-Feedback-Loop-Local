// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_METAINFO_CORE_H_
#define FLATBUFFERS_GENERATED_METAINFO_CORE_H_

#include "flatbuffers/flatbuffers.h"

namespace Core {

struct MetaInformation;
struct MetaInformationBuilder;
struct MetaInformationT;

struct MetaInformationT : public flatbuffers::NativeTable {
  typedef MetaInformation TableType;
  uint64_t time = 0;
  std::string reference_frame{};
  std::string cache_name{};
  uint64_t life_time = 0;
  std::string widget_stream{};
};

struct MetaInformation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MetaInformationT NativeTableType;
  typedef MetaInformationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_REFERENCE_FRAME = 6,
    VT_CACHE_NAME = 8,
    VT_LIFE_TIME = 10,
    VT_WIDGET_STREAM = 12
  };
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  const flatbuffers::String *reference_frame() const {
    return GetPointer<const flatbuffers::String *>(VT_REFERENCE_FRAME);
  }
  const flatbuffers::String *cache_name() const {
    return GetPointer<const flatbuffers::String *>(VT_CACHE_NAME);
  }
  uint64_t life_time() const {
    return GetField<uint64_t>(VT_LIFE_TIME, 0);
  }
  const flatbuffers::String *widget_stream() const {
    return GetPointer<const flatbuffers::String *>(VT_WIDGET_STREAM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIME, 8) &&
           VerifyOffset(verifier, VT_REFERENCE_FRAME) &&
           verifier.VerifyString(reference_frame()) &&
           VerifyOffset(verifier, VT_CACHE_NAME) &&
           verifier.VerifyString(cache_name()) &&
           VerifyField<uint64_t>(verifier, VT_LIFE_TIME, 8) &&
           VerifyOffset(verifier, VT_WIDGET_STREAM) &&
           verifier.VerifyString(widget_stream()) &&
           verifier.EndTable();
  }
  MetaInformationT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MetaInformationT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MetaInformation> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MetaInformationT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MetaInformationBuilder {
  typedef MetaInformation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(MetaInformation::VT_TIME, time, 0);
  }
  void add_reference_frame(flatbuffers::Offset<flatbuffers::String> reference_frame) {
    fbb_.AddOffset(MetaInformation::VT_REFERENCE_FRAME, reference_frame);
  }
  void add_cache_name(flatbuffers::Offset<flatbuffers::String> cache_name) {
    fbb_.AddOffset(MetaInformation::VT_CACHE_NAME, cache_name);
  }
  void add_life_time(uint64_t life_time) {
    fbb_.AddElement<uint64_t>(MetaInformation::VT_LIFE_TIME, life_time, 0);
  }
  void add_widget_stream(flatbuffers::Offset<flatbuffers::String> widget_stream) {
    fbb_.AddOffset(MetaInformation::VT_WIDGET_STREAM, widget_stream);
  }
  explicit MetaInformationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MetaInformation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MetaInformation>(end);
    return o;
  }
};

inline flatbuffers::Offset<MetaInformation> CreateMetaInformation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    flatbuffers::Offset<flatbuffers::String> reference_frame = 0,
    flatbuffers::Offset<flatbuffers::String> cache_name = 0,
    uint64_t life_time = 0,
    flatbuffers::Offset<flatbuffers::String> widget_stream = 0) {
  MetaInformationBuilder builder_(_fbb);
  builder_.add_life_time(life_time);
  builder_.add_time(time);
  builder_.add_widget_stream(widget_stream);
  builder_.add_cache_name(cache_name);
  builder_.add_reference_frame(reference_frame);
  return builder_.Finish();
}

inline flatbuffers::Offset<MetaInformation> CreateMetaInformationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    const char *reference_frame = nullptr,
    const char *cache_name = nullptr,
    uint64_t life_time = 0,
    const char *widget_stream = nullptr) {
  auto reference_frame__ = reference_frame ? _fbb.CreateString(reference_frame) : 0;
  auto cache_name__ = cache_name ? _fbb.CreateString(cache_name) : 0;
  auto widget_stream__ = widget_stream ? _fbb.CreateString(widget_stream) : 0;
  return Core::CreateMetaInformation(
      _fbb,
      time,
      reference_frame__,
      cache_name__,
      life_time,
      widget_stream__);
}

flatbuffers::Offset<MetaInformation> CreateMetaInformation(flatbuffers::FlatBufferBuilder &_fbb, const MetaInformationT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MetaInformationT *MetaInformation::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MetaInformationT>(new MetaInformationT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MetaInformation::UnPackTo(MetaInformationT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = time(); _o->time = _e; }
  { auto _e = reference_frame(); if (_e) _o->reference_frame = _e->str(); }
  { auto _e = cache_name(); if (_e) _o->cache_name = _e->str(); }
  { auto _e = life_time(); _o->life_time = _e; }
  { auto _e = widget_stream(); if (_e) _o->widget_stream = _e->str(); }
}

inline flatbuffers::Offset<MetaInformation> MetaInformation::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MetaInformationT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMetaInformation(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MetaInformation> CreateMetaInformation(flatbuffers::FlatBufferBuilder &_fbb, const MetaInformationT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MetaInformationT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _time = _o->time;
  auto _reference_frame = _o->reference_frame.empty() ? 0 : _fbb.CreateString(_o->reference_frame);
  auto _cache_name = _o->cache_name.empty() ? 0 : _fbb.CreateString(_o->cache_name);
  auto _life_time = _o->life_time;
  auto _widget_stream = _o->widget_stream.empty() ? 0 : _fbb.CreateString(_o->widget_stream);
  return Core::CreateMetaInformation(
      _fbb,
      _time,
      _reference_frame,
      _cache_name,
      _life_time,
      _widget_stream);
}

}  // namespace Core

#endif  // FLATBUFFERS_GENERATED_METAINFO_CORE_H_
