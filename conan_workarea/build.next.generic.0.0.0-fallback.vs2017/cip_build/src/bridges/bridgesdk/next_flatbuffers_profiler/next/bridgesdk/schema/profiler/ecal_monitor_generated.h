// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ECALMONITOR_H_
#define FLATBUFFERS_GENERATED_ECALMONITOR_H_

#include "flatbuffers/flatbuffers.h"

struct CpuProfiler;
struct CpuProfilerBuilder;
struct CpuProfilerT;

struct CpuProfilerT : public flatbuffers::NativeTable {
  typedef CpuProfiler TableType;
  std::string signal_list{};
};

struct CpuProfiler FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CpuProfilerT NativeTableType;
  typedef CpuProfilerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIGNAL_LIST = 4
  };
  const flatbuffers::String *signal_list() const {
    return GetPointer<const flatbuffers::String *>(VT_SIGNAL_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SIGNAL_LIST) &&
           verifier.VerifyString(signal_list()) &&
           verifier.EndTable();
  }
  CpuProfilerT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CpuProfilerT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CpuProfiler> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CpuProfilerT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CpuProfilerBuilder {
  typedef CpuProfiler Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_signal_list(flatbuffers::Offset<flatbuffers::String> signal_list) {
    fbb_.AddOffset(CpuProfiler::VT_SIGNAL_LIST, signal_list);
  }
  explicit CpuProfilerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CpuProfiler> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CpuProfiler>(end);
    return o;
  }
};

inline flatbuffers::Offset<CpuProfiler> CreateCpuProfiler(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> signal_list = 0) {
  CpuProfilerBuilder builder_(_fbb);
  builder_.add_signal_list(signal_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<CpuProfiler> CreateCpuProfilerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *signal_list = nullptr) {
  auto signal_list__ = signal_list ? _fbb.CreateString(signal_list) : 0;
  return CreateCpuProfiler(
      _fbb,
      signal_list__);
}

flatbuffers::Offset<CpuProfiler> CreateCpuProfiler(flatbuffers::FlatBufferBuilder &_fbb, const CpuProfilerT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CpuProfilerT *CpuProfiler::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CpuProfilerT>(new CpuProfilerT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CpuProfiler::UnPackTo(CpuProfilerT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = signal_list(); if (_e) _o->signal_list = _e->str(); }
}

inline flatbuffers::Offset<CpuProfiler> CpuProfiler::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CpuProfilerT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCpuProfiler(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CpuProfiler> CreateCpuProfiler(flatbuffers::FlatBufferBuilder &_fbb, const CpuProfilerT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CpuProfilerT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _signal_list = _o->signal_list.empty() ? 0 : _fbb.CreateString(_o->signal_list);
  return CreateCpuProfiler(
      _fbb,
      _signal_list);
}

inline const CpuProfiler *GetCpuProfiler(const void *buf) {
  return flatbuffers::GetRoot<CpuProfiler>(buf);
}

inline const CpuProfiler *GetSizePrefixedCpuProfiler(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<CpuProfiler>(buf);
}

inline bool VerifyCpuProfilerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CpuProfiler>(nullptr);
}

inline bool VerifySizePrefixedCpuProfilerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CpuProfiler>(nullptr);
}

inline void FinishCpuProfilerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CpuProfiler> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCpuProfilerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<CpuProfiler> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<CpuProfilerT> UnPackCpuProfiler(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<CpuProfilerT>(GetCpuProfiler(buf)->UnPack(res));
}

inline std::unique_ptr<CpuProfilerT> UnPackSizePrefixedCpuProfiler(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<CpuProfilerT>(GetSizePrefixedCpuProfiler(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_ECALMONITOR_H_
