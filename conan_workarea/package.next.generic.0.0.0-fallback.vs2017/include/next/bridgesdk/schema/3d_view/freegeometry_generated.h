// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FREEGEOMETRY_GUISCHEMA_H_
#define FLATBUFFERS_GENERATED_FREEGEOMETRY_GUISCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace GuiSchema {

struct Vertex;

struct FreeGeometry;
struct FreeGeometryBuilder;
struct FreeGeometryT;

struct FreeGeometryList;
struct FreeGeometryListBuilder;
struct FreeGeometryListT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vertex FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vertex()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vertex(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vertex, 12);

struct FreeGeometryT : public flatbuffers::NativeTable {
  typedef FreeGeometry TableType;
  int32_t id = 0;
  int32_t sensorUid = 0;
  std::vector<GuiSchema::Vertex> vertices{};
  float height = 0.0f;
  std::string color{};
};

struct FreeGeometry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FreeGeometryT NativeTableType;
  typedef FreeGeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_SENSORUID = 6,
    VT_VERTICES = 8,
    VT_HEIGHT = 10,
    VT_COLOR = 12
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t sensorUid() const {
    return GetField<int32_t>(VT_SENSORUID, 0);
  }
  const flatbuffers::Vector<const GuiSchema::Vertex *> *vertices() const {
    return GetPointer<const flatbuffers::Vector<const GuiSchema::Vertex *> *>(VT_VERTICES);
  }
  float height() const {
    return GetField<float>(VT_HEIGHT, 0.0f);
  }
  const flatbuffers::String *color() const {
    return GetPointer<const flatbuffers::String *>(VT_COLOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_SENSORUID, 4) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyField<float>(verifier, VT_HEIGHT, 4) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyString(color()) &&
           verifier.EndTable();
  }
  FreeGeometryT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FreeGeometryT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<FreeGeometry> Pack(flatbuffers::FlatBufferBuilder &_fbb, const FreeGeometryT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FreeGeometryBuilder {
  typedef FreeGeometry Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FreeGeometry::VT_ID, id, 0);
  }
  void add_sensorUid(int32_t sensorUid) {
    fbb_.AddElement<int32_t>(FreeGeometry::VT_SENSORUID, sensorUid, 0);
  }
  void add_vertices(flatbuffers::Offset<flatbuffers::Vector<const GuiSchema::Vertex *>> vertices) {
    fbb_.AddOffset(FreeGeometry::VT_VERTICES, vertices);
  }
  void add_height(float height) {
    fbb_.AddElement<float>(FreeGeometry::VT_HEIGHT, height, 0.0f);
  }
  void add_color(flatbuffers::Offset<flatbuffers::String> color) {
    fbb_.AddOffset(FreeGeometry::VT_COLOR, color);
  }
  explicit FreeGeometryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FreeGeometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FreeGeometry>(end);
    return o;
  }
};

inline flatbuffers::Offset<FreeGeometry> CreateFreeGeometry(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t sensorUid = 0,
    flatbuffers::Offset<flatbuffers::Vector<const GuiSchema::Vertex *>> vertices = 0,
    float height = 0.0f,
    flatbuffers::Offset<flatbuffers::String> color = 0) {
  FreeGeometryBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_height(height);
  builder_.add_vertices(vertices);
  builder_.add_sensorUid(sensorUid);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<FreeGeometry> CreateFreeGeometryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t sensorUid = 0,
    const std::vector<GuiSchema::Vertex> *vertices = nullptr,
    float height = 0.0f,
    const char *color = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<GuiSchema::Vertex>(*vertices) : 0;
  auto color__ = color ? _fbb.CreateString(color) : 0;
  return GuiSchema::CreateFreeGeometry(
      _fbb,
      id,
      sensorUid,
      vertices__,
      height,
      color__);
}

flatbuffers::Offset<FreeGeometry> CreateFreeGeometry(flatbuffers::FlatBufferBuilder &_fbb, const FreeGeometryT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct FreeGeometryListT : public flatbuffers::NativeTable {
  typedef FreeGeometryList TableType;
  std::vector<std::unique_ptr<GuiSchema::FreeGeometryT>> freeGeometry{};
  FreeGeometryListT() = default;
  FreeGeometryListT(const FreeGeometryListT &o);
  FreeGeometryListT(FreeGeometryListT&&) FLATBUFFERS_NOEXCEPT = default;
  FreeGeometryListT &operator=(FreeGeometryListT o) FLATBUFFERS_NOEXCEPT;
};

struct FreeGeometryList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FreeGeometryListT NativeTableType;
  typedef FreeGeometryListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FREEGEOMETRY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<GuiSchema::FreeGeometry>> *freeGeometry() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GuiSchema::FreeGeometry>> *>(VT_FREEGEOMETRY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FREEGEOMETRY) &&
           verifier.VerifyVector(freeGeometry()) &&
           verifier.VerifyVectorOfTables(freeGeometry()) &&
           verifier.EndTable();
  }
  FreeGeometryListT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FreeGeometryListT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<FreeGeometryList> Pack(flatbuffers::FlatBufferBuilder &_fbb, const FreeGeometryListT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FreeGeometryListBuilder {
  typedef FreeGeometryList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_freeGeometry(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GuiSchema::FreeGeometry>>> freeGeometry) {
    fbb_.AddOffset(FreeGeometryList::VT_FREEGEOMETRY, freeGeometry);
  }
  explicit FreeGeometryListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FreeGeometryList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FreeGeometryList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FreeGeometryList> CreateFreeGeometryList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GuiSchema::FreeGeometry>>> freeGeometry = 0) {
  FreeGeometryListBuilder builder_(_fbb);
  builder_.add_freeGeometry(freeGeometry);
  return builder_.Finish();
}

inline flatbuffers::Offset<FreeGeometryList> CreateFreeGeometryListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<GuiSchema::FreeGeometry>> *freeGeometry = nullptr) {
  auto freeGeometry__ = freeGeometry ? _fbb.CreateVector<flatbuffers::Offset<GuiSchema::FreeGeometry>>(*freeGeometry) : 0;
  return GuiSchema::CreateFreeGeometryList(
      _fbb,
      freeGeometry__);
}

flatbuffers::Offset<FreeGeometryList> CreateFreeGeometryList(flatbuffers::FlatBufferBuilder &_fbb, const FreeGeometryListT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline FreeGeometryT *FreeGeometry::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FreeGeometryT>(new FreeGeometryT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FreeGeometry::UnPackTo(FreeGeometryT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = sensorUid(); _o->sensorUid = _e; }
  { auto _e = vertices(); if (_e) { _o->vertices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->vertices[_i] = *_e->Get(_i); } } }
  { auto _e = height(); _o->height = _e; }
  { auto _e = color(); if (_e) _o->color = _e->str(); }
}

inline flatbuffers::Offset<FreeGeometry> FreeGeometry::Pack(flatbuffers::FlatBufferBuilder &_fbb, const FreeGeometryT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFreeGeometry(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<FreeGeometry> CreateFreeGeometry(flatbuffers::FlatBufferBuilder &_fbb, const FreeGeometryT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const FreeGeometryT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _sensorUid = _o->sensorUid;
  auto _vertices = _o->vertices.size() ? _fbb.CreateVectorOfStructs(_o->vertices) : 0;
  auto _height = _o->height;
  auto _color = _o->color.empty() ? 0 : _fbb.CreateString(_o->color);
  return GuiSchema::CreateFreeGeometry(
      _fbb,
      _id,
      _sensorUid,
      _vertices,
      _height,
      _color);
}

inline FreeGeometryListT::FreeGeometryListT(const FreeGeometryListT &o) {
  freeGeometry.reserve(o.freeGeometry.size());
  for (const auto &v : o.freeGeometry) { freeGeometry.emplace_back((v) ? new GuiSchema::FreeGeometryT(*v) : nullptr); }
}

inline FreeGeometryListT &FreeGeometryListT::operator=(FreeGeometryListT o) FLATBUFFERS_NOEXCEPT {
  std::swap(freeGeometry, o.freeGeometry);
  return *this;
}

inline FreeGeometryListT *FreeGeometryList::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FreeGeometryListT>(new FreeGeometryListT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FreeGeometryList::UnPackTo(FreeGeometryListT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = freeGeometry(); if (_e) { _o->freeGeometry.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->freeGeometry[_i]) { _e->Get(_i)->UnPackTo(_o->freeGeometry[_i].get(), _resolver); } else { _o->freeGeometry[_i] = std::unique_ptr<GuiSchema::FreeGeometryT>(_e->Get(_i)->UnPack(_resolver)); }; } } }
}

inline flatbuffers::Offset<FreeGeometryList> FreeGeometryList::Pack(flatbuffers::FlatBufferBuilder &_fbb, const FreeGeometryListT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFreeGeometryList(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<FreeGeometryList> CreateFreeGeometryList(flatbuffers::FlatBufferBuilder &_fbb, const FreeGeometryListT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const FreeGeometryListT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _freeGeometry = _o->freeGeometry.size() ? _fbb.CreateVector<flatbuffers::Offset<GuiSchema::FreeGeometry>> (_o->freeGeometry.size(), [](size_t i, _VectorArgs *__va) { return CreateFreeGeometry(*__va->__fbb, __va->__o->freeGeometry[i].get(), __va->__rehasher); }, &_va ) : 0;
  return GuiSchema::CreateFreeGeometryList(
      _fbb,
      _freeGeometry);
}

inline const GuiSchema::FreeGeometryList *GetFreeGeometryList(const void *buf) {
  return flatbuffers::GetRoot<GuiSchema::FreeGeometryList>(buf);
}

inline const GuiSchema::FreeGeometryList *GetSizePrefixedFreeGeometryList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GuiSchema::FreeGeometryList>(buf);
}

inline const char *FreeGeometryListIdentifier() {
  return "FG01";
}

inline bool FreeGeometryListBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FreeGeometryListIdentifier());
}

inline bool SizePrefixedFreeGeometryListBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, FreeGeometryListIdentifier(), true);
}

inline bool VerifyFreeGeometryListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GuiSchema::FreeGeometryList>(FreeGeometryListIdentifier());
}

inline bool VerifySizePrefixedFreeGeometryListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GuiSchema::FreeGeometryList>(FreeGeometryListIdentifier());
}

inline void FinishFreeGeometryListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GuiSchema::FreeGeometryList> root) {
  fbb.Finish(root, FreeGeometryListIdentifier());
}

inline void FinishSizePrefixedFreeGeometryListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GuiSchema::FreeGeometryList> root) {
  fbb.FinishSizePrefixed(root, FreeGeometryListIdentifier());
}

inline std::unique_ptr<GuiSchema::FreeGeometryListT> UnPackFreeGeometryList(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<GuiSchema::FreeGeometryListT>(GetFreeGeometryList(buf)->UnPack(res));
}

inline std::unique_ptr<GuiSchema::FreeGeometryListT> UnPackSizePrefixedFreeGeometryList(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<GuiSchema::FreeGeometryListT>(GetSizePrefixedFreeGeometryList(buf)->UnPack(res));
}

}  // namespace GuiSchema

#endif  // FLATBUFFERS_GENERATED_FREEGEOMETRY_GUISCHEMA_H_
