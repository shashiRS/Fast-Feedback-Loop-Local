// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GROUNDLINE_GUISCHEMA_H_
#define FLATBUFFERS_GENERATED_GROUNDLINE_GUISCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace GuiSchema {

struct GroundLine;
struct GroundLineBuilder;
struct GroundLineT;

struct GroundLineList;
struct GroundLineListBuilder;
struct GroundLineListT;

struct GroundLineT : public flatbuffers::NativeTable {
  typedef GroundLine TableType;
  int32_t id = 0;
  std::vector<float> pointsX{};
  std::vector<float> pointsY{};
  bool dashed = false;
  double lineWidth = 1.0;
};

struct GroundLine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroundLineT NativeTableType;
  typedef GroundLineBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_POINTSX = 6,
    VT_POINTSY = 8,
    VT_DASHED = 10,
    VT_LINEWIDTH = 12
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<float> *pointsX() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_POINTSX);
  }
  const flatbuffers::Vector<float> *pointsY() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_POINTSY);
  }
  bool dashed() const {
    return GetField<uint8_t>(VT_DASHED, 0) != 0;
  }
  double lineWidth() const {
    return GetField<double>(VT_LINEWIDTH, 1.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_POINTSX) &&
           verifier.VerifyVector(pointsX()) &&
           VerifyOffset(verifier, VT_POINTSY) &&
           verifier.VerifyVector(pointsY()) &&
           VerifyField<uint8_t>(verifier, VT_DASHED, 1) &&
           VerifyField<double>(verifier, VT_LINEWIDTH, 8) &&
           verifier.EndTable();
  }
  GroundLineT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GroundLineT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<GroundLine> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GroundLineT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GroundLineBuilder {
  typedef GroundLine Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(GroundLine::VT_ID, id, 0);
  }
  void add_pointsX(flatbuffers::Offset<flatbuffers::Vector<float>> pointsX) {
    fbb_.AddOffset(GroundLine::VT_POINTSX, pointsX);
  }
  void add_pointsY(flatbuffers::Offset<flatbuffers::Vector<float>> pointsY) {
    fbb_.AddOffset(GroundLine::VT_POINTSY, pointsY);
  }
  void add_dashed(bool dashed) {
    fbb_.AddElement<uint8_t>(GroundLine::VT_DASHED, static_cast<uint8_t>(dashed), 0);
  }
  void add_lineWidth(double lineWidth) {
    fbb_.AddElement<double>(GroundLine::VT_LINEWIDTH, lineWidth, 1.0);
  }
  explicit GroundLineBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GroundLine> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GroundLine>(end);
    return o;
  }
};

inline flatbuffers::Offset<GroundLine> CreateGroundLine(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> pointsX = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> pointsY = 0,
    bool dashed = false,
    double lineWidth = 1.0) {
  GroundLineBuilder builder_(_fbb);
  builder_.add_lineWidth(lineWidth);
  builder_.add_pointsY(pointsY);
  builder_.add_pointsX(pointsX);
  builder_.add_id(id);
  builder_.add_dashed(dashed);
  return builder_.Finish();
}

inline flatbuffers::Offset<GroundLine> CreateGroundLineDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const std::vector<float> *pointsX = nullptr,
    const std::vector<float> *pointsY = nullptr,
    bool dashed = false,
    double lineWidth = 1.0) {
  auto pointsX__ = pointsX ? _fbb.CreateVector<float>(*pointsX) : 0;
  auto pointsY__ = pointsY ? _fbb.CreateVector<float>(*pointsY) : 0;
  return GuiSchema::CreateGroundLine(
      _fbb,
      id,
      pointsX__,
      pointsY__,
      dashed,
      lineWidth);
}

flatbuffers::Offset<GroundLine> CreateGroundLine(flatbuffers::FlatBufferBuilder &_fbb, const GroundLineT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct GroundLineListT : public flatbuffers::NativeTable {
  typedef GroundLineList TableType;
  std::vector<std::unique_ptr<GuiSchema::GroundLineT>> groundLines{};
  GroundLineListT() = default;
  GroundLineListT(const GroundLineListT &o);
  GroundLineListT(GroundLineListT&&) FLATBUFFERS_NOEXCEPT = default;
  GroundLineListT &operator=(GroundLineListT o) FLATBUFFERS_NOEXCEPT;
};

struct GroundLineList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroundLineListT NativeTableType;
  typedef GroundLineListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUNDLINES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<GuiSchema::GroundLine>> *groundLines() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GuiSchema::GroundLine>> *>(VT_GROUNDLINES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GROUNDLINES) &&
           verifier.VerifyVector(groundLines()) &&
           verifier.VerifyVectorOfTables(groundLines()) &&
           verifier.EndTable();
  }
  GroundLineListT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GroundLineListT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<GroundLineList> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GroundLineListT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GroundLineListBuilder {
  typedef GroundLineList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_groundLines(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GuiSchema::GroundLine>>> groundLines) {
    fbb_.AddOffset(GroundLineList::VT_GROUNDLINES, groundLines);
  }
  explicit GroundLineListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GroundLineList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GroundLineList>(end);
    return o;
  }
};

inline flatbuffers::Offset<GroundLineList> CreateGroundLineList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GuiSchema::GroundLine>>> groundLines = 0) {
  GroundLineListBuilder builder_(_fbb);
  builder_.add_groundLines(groundLines);
  return builder_.Finish();
}

inline flatbuffers::Offset<GroundLineList> CreateGroundLineListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<GuiSchema::GroundLine>> *groundLines = nullptr) {
  auto groundLines__ = groundLines ? _fbb.CreateVector<flatbuffers::Offset<GuiSchema::GroundLine>>(*groundLines) : 0;
  return GuiSchema::CreateGroundLineList(
      _fbb,
      groundLines__);
}

flatbuffers::Offset<GroundLineList> CreateGroundLineList(flatbuffers::FlatBufferBuilder &_fbb, const GroundLineListT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GroundLineT *GroundLine::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GroundLineT>(new GroundLineT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GroundLine::UnPackTo(GroundLineT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = pointsX(); if (_e) { _o->pointsX.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->pointsX[_i] = _e->Get(_i); } } }
  { auto _e = pointsY(); if (_e) { _o->pointsY.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->pointsY[_i] = _e->Get(_i); } } }
  { auto _e = dashed(); _o->dashed = _e; }
  { auto _e = lineWidth(); _o->lineWidth = _e; }
}

inline flatbuffers::Offset<GroundLine> GroundLine::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GroundLineT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGroundLine(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<GroundLine> CreateGroundLine(flatbuffers::FlatBufferBuilder &_fbb, const GroundLineT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GroundLineT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _pointsX = _o->pointsX.size() ? _fbb.CreateVector(_o->pointsX) : 0;
  auto _pointsY = _o->pointsY.size() ? _fbb.CreateVector(_o->pointsY) : 0;
  auto _dashed = _o->dashed;
  auto _lineWidth = _o->lineWidth;
  return GuiSchema::CreateGroundLine(
      _fbb,
      _id,
      _pointsX,
      _pointsY,
      _dashed,
      _lineWidth);
}

inline GroundLineListT::GroundLineListT(const GroundLineListT &o) {
  groundLines.reserve(o.groundLines.size());
  for (const auto &v : o.groundLines) { groundLines.emplace_back((v) ? new GuiSchema::GroundLineT(*v) : nullptr); }
}

inline GroundLineListT &GroundLineListT::operator=(GroundLineListT o) FLATBUFFERS_NOEXCEPT {
  std::swap(groundLines, o.groundLines);
  return *this;
}

inline GroundLineListT *GroundLineList::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GroundLineListT>(new GroundLineListT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GroundLineList::UnPackTo(GroundLineListT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = groundLines(); if (_e) { _o->groundLines.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->groundLines[_i]) { _e->Get(_i)->UnPackTo(_o->groundLines[_i].get(), _resolver); } else { _o->groundLines[_i] = std::unique_ptr<GuiSchema::GroundLineT>(_e->Get(_i)->UnPack(_resolver)); }; } } }
}

inline flatbuffers::Offset<GroundLineList> GroundLineList::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GroundLineListT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGroundLineList(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<GroundLineList> CreateGroundLineList(flatbuffers::FlatBufferBuilder &_fbb, const GroundLineListT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GroundLineListT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _groundLines = _o->groundLines.size() ? _fbb.CreateVector<flatbuffers::Offset<GuiSchema::GroundLine>> (_o->groundLines.size(), [](size_t i, _VectorArgs *__va) { return CreateGroundLine(*__va->__fbb, __va->__o->groundLines[i].get(), __va->__rehasher); }, &_va ) : 0;
  return GuiSchema::CreateGroundLineList(
      _fbb,
      _groundLines);
}

inline const GuiSchema::GroundLineList *GetGroundLineList(const void *buf) {
  return flatbuffers::GetRoot<GuiSchema::GroundLineList>(buf);
}

inline const GuiSchema::GroundLineList *GetSizePrefixedGroundLineList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GuiSchema::GroundLineList>(buf);
}

inline const char *GroundLineListIdentifier() {
  return "GL01";
}

inline bool GroundLineListBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, GroundLineListIdentifier());
}

inline bool SizePrefixedGroundLineListBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, GroundLineListIdentifier(), true);
}

inline bool VerifyGroundLineListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GuiSchema::GroundLineList>(GroundLineListIdentifier());
}

inline bool VerifySizePrefixedGroundLineListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GuiSchema::GroundLineList>(GroundLineListIdentifier());
}

inline void FinishGroundLineListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GuiSchema::GroundLineList> root) {
  fbb.Finish(root, GroundLineListIdentifier());
}

inline void FinishSizePrefixedGroundLineListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GuiSchema::GroundLineList> root) {
  fbb.FinishSizePrefixed(root, GroundLineListIdentifier());
}

inline std::unique_ptr<GuiSchema::GroundLineListT> UnPackGroundLineList(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<GuiSchema::GroundLineListT>(GetGroundLineList(buf)->UnPack(res));
}

inline std::unique_ptr<GuiSchema::GroundLineListT> UnPackSizePrefixedGroundLineList(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<GuiSchema::GroundLineListT>(GetSizePrefixedGroundLineList(buf)->UnPack(res));
}

}  // namespace GuiSchema

#endif  // FLATBUFFERS_GENERATED_GROUNDLINE_GUISCHEMA_H_
