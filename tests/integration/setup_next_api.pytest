"""
    Copyright 2022 Continental Corporation

    This file contains up to four methods that will be called by the test framework:
        - global_setup(): Will be called before ALL test-cases
        - setup(): Will be called before EACH test-case
        - teardown(): Will be called after EACH test-case. Will also be called if test-case fails.
        - global_teardown(): Will be called after ALL test-cases.
                             Will be called if any execution before fails.

    :file: setup.pytest

    :author:
        - Fabian Janker (uif41320) <fabian.janker@continental-corporation.com>
"""
import os
import shutil

from next_api_path import path_import_extension
from py_api import next_api as next_
from helper_files.General import global_Variables
from ptf.ptf_utils.global_params import get_parameter, set_global_parameter
from ptf.tools_utils import common
from ptf.verify_utils import ptf_asserts

needed_packages = [("websocket-client", "1.3.1")]
for package in needed_packages:
    common.install_pip_pkg(package[0], package[1])


def global_setup():
    """
    This method will be called before ALL test-cases are executed.

    You can set global variables with :func:`set_global_parameter`.
    Will skip execution of tests if this method fails.
    """
    # deleting the folder signal_storage for a defined and clean start
    if os.path.isdir(os.path.join(os.path.expanduser("~"), "mts")):
        if os.path.isdir(os.path.join(os.path.expanduser("~"), "mts", "signal_storage")):
            shutil.rmtree(os.path.join(os.path.expanduser("~"), "mts", "signal_storage"))

    # saving the path of the test in current_path
    setup_path = os.path.dirname(os.path.realpath(__file__))
    # changing the directory to the folder with the executables in it
    os.chdir(global_Variables.EXE_DIR)

    next_api = next_.NextAPI()

    # set up the global variable for the player
    set_global_parameter("next_api", next_api)

    # changing the directory from the executable folder to the test folder back
    os.chdir(setup_path)

    # Checking if the executables are running
    if next_api.controlbridge_proc.poll() is None:
        print("ControlBridge is running...")
    else:
        print("ControlBridge has stopped!")

    if next_api.databridge_proc.poll() is None:
        print("DataBridge is running...")
    else:
        print("DataBridge has stopped!")

    if next_api.player_proc.poll() is None:
        print("Player is running...")
    else:
        print("Player has stopped!")


def global_teardown():
    """
    This method will be called after ALL test-cases are executed.

    You can access global variables with :func:`get_parameter`.
    Guaranteed to be called, even if any test or global setup fails.
    """
    next_handle = get_parameter("next_api")
    next_handle.stop_backend()


def setup():
    """
    This method will be called before EACH test-case is executed.

    You can set local variables just available for the next test-case
    using :func:`set_local_parameter`.

    You can access global variables with :func:`get_parameter`.

    Will skip execution of test if this method fails.
    Skipped if global setup fails.
    """
    next_handle = get_parameter("next_api")

    # Checking if the executables are running
    if next_handle.controlbridge_proc.poll() is None:
        print("ControlBridge is running...")
    else:
        ptf_asserts.fail("ControlBridge has stopped!")

    if next_handle.databridge_proc.poll() is None:
        print("DataBridge is running...")
    else:
        ptf_asserts.fail("DataBridge has stopped!")

    if next_handle.player_proc.poll() is None:
        print("Player is running...")
    else:
        ptf_asserts.fail("Player has stopped!")


def teardown():
    """
    This method will be called after EACH testcase is executed.

    You can access global variables with :func:`get_parameter`.

    Guaranteed to be called, even if the test or setup fails.
    Skipped if global setup fails.
    """
