"""
    Copyright 2022 Continental Corporation

    :file: swt_load_recording.pytest
    :platform: Windows, Linux
    :synopsis:
        Script containing test case(s) for loading a recording over the ControlBridge

    :author:
        - Fabian Janker (uif41320) <fabian.janker@continental-corporation.com>
        - Alexandru Buraga (uic928270) <alexandru.2.buraga@continental-corporation.com>
"""

# standard Python import area
import json

from helper_files.ControlBridge import controlbridge_Variables
from helper_files.General import global_Variables
from ptf.ptf_utils.global_params import get_parameter
from ptf.ptf_utils.report import (
    DETAILS,
    EXPECTED,
    PRECONDITION,
    TESTSTEP,
    TESTTAG,
    VERIFIES,
)
from ptf.verify_utils import ptf_asserts, ptf_expects


def SWT_REC_LOADING_EVENT_TEST():
    DETAILS("Test case to check if the event of the load recording is correct")

    VERIFIES("The test is verifying, that the event is correct")

    TESTTAG("blackbox")
    TESTTAG("integration")
    TESTTAG("design-driven")
    TESTTAG("sil")
    TESTTAG("controlbridge")

    PRECONDITION("ControlBridge, DataBridge & Next_Player has started (global setup)")
    PRECONDITION("Connection to the ControlBridge and DataBridge")

    # getting the next_api
    next_api = get_parameter("next_api")

    TESTSTEP("Checking if the event of loading a recording is correct")
    TESTSTEP("PRECONDITION: Load recording.")
    # sending the message to load a recording into the player
    recording_path = global_Variables.recording_dir()
    recv_load_recording = next_api.execute.load_recording(recording_path)
    ptf_asserts.verify(bool(recv_load_recording), True, "Timeout while loading the recording. Message received: {}".format(recv_load_recording))
    TESTSTEP("PRECONDITION: Recording is loaded")

    TESTSTEP("POSTCONDITION: Close the recording")
    EXPECTED("event: SimulationStateIsIdle")
    recv_close_recording = next_api.execute.close_recording()
    ptf_asserts.verify(bool(recv_close_recording), True, "Timeout while closing the recording. Message received: {}".format(recv_close_recording))
    TESTSTEP("POSTCONDITION: Recording is closed")


def SWT_REC_LOADING_PAYLOAD_TEST():
    DETAILS("Test case to check if the payload of the load recording is correctly")

    VERIFIES("The test is verifying, that the payload is correct")

    TESTTAG("blackbox")
    TESTTAG("integration")
    TESTTAG("design-driven")
    TESTTAG("sil")
    TESTTAG("controlbridge")

    PRECONDITION("ControlBridge, DataBridge & Next_Player has started (global setup)")
    PRECONDITION("Connection to the ControlBridge and DataBridge")

    # getting the next_api
    next_api = get_parameter("next_api")

    PRECONDITION("Load recording.")
    # sending the message to load a recording into the player
    recording_path = global_Variables.recording_dir()
    recv_load_recording = next_api.execute.load_recording(recording_path)
    ptf_asserts.verify(bool(recv_load_recording), True, "Timeout while loading the recording. Message received: {}".format(recv_load_recording))
    PRECONDITION("Recording is loaded")

    TESTSTEP("Checking if the payload of loading a recording is correct")
    EXPECTED("payload: currentTimestamp >= 0")
    try:
        recv_payload_load_currentTimestamp = recv_load_recording["payload"]["currentTimestamp"]
        ptf_expects.expect_gt_eq(recv_payload_load_currentTimestamp, 0, "The Timestamp of the loaded recording is not greater equal 0!")
    except (TypeError, KeyError):
        ptf_expects.fail("Wrong payload error! response: {}".format(recv_load_recording))
    finally:
        TESTSTEP("POSTCONDITION: Close the recording")
        EXPECTED("event: SimulationStateIsIdle")
        recv_close_recording = next_api.execute.close_recording()
        ptf_asserts.verify(bool(recv_close_recording), True, "Timeout while closing the recording. Message received: {}".format(recv_close_recording))
        TESTSTEP("POSTCONDITION: Recording is closed")
