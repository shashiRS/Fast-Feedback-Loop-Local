"""
    Copyright 2023 Continental Corporation

    :file: swt_jump_to_timestamp.pytest
    :platform: Windows, Linux
    :synopsis:
        Script containing test case(s) for jumping to timestamp

    :author:
        - Vinersar Dan-Ioan (uie65184) <dan.ioan.vinersar@continental-corporation.com>
        - Alexandru Buraga (uic928270) <alexandru.2.buraga@continental-corporation.com>
"""

import json
import random
import time
from helper_files.ControlBridge import controlbridge_Variables
from helper_files.General import global_Variables
from ptf.ptf_utils.global_params import get_parameter
from ptf.ptf_utils.report import (
    DETAILS,
    EXPECTED,
    PRECONDITION,
    TESTSTEP,
    TESTTAG,
    VERIFIES,
)
from ptf.verify_utils import ptf_asserts, ptf_expects


def SWT_JUMP_TO_TIMESTAMP_TEST():
    DETAILS("Test case to check if the event of jump to timestamp is correct")

    VERIFIES("The test is verifying, that the event is correct")

    TESTTAG("blackbox")
    TESTTAG("integration")
    TESTTAG("design-driven")
    TESTTAG("sil")
    TESTTAG("controlbridge")

    PRECONDITION("ControlBridge, DataBridge & Next_Player has started (global setup)")
    PRECONDITION("Connection to the ControlBridge and DataBridge")

    # getting the next_api
    next_api = get_parameter("next_api")

    PRECONDITION("Load recording.")
    # sending the message to load a recording into the player
    recording_path = global_Variables.recording_dir(is_zrec=True)
    recv_load_recording = next_api.execute.load_recording(recording_path)
    ptf_asserts.verify(bool(recv_load_recording), True, "Timeout while loading the recording. Message received: {}".format(recv_load_recording))
    PRECONDITION("Recording is loaded")
    try:
        PRECONDITION("Start to play the recording")
        # sending the message to play the recording and receive the response
        response_play = next_api.execute.play_recording()
        # if controlbridge_websocket returns False, a timeout has occurred
        ptf_asserts.verify(bool(response_play), True, "Timeout while playing the recording. Message received: {}".format(response_play))
        PRECONDITION("Recording is played")

        time.sleep(random.uniform(0.01, 0.1))

        PRECONDITION("Pause the recording")
        response_pause = next_api.execute.pause_recording()
        ptf_asserts.verify(bool(response_pause), True, "Timeout while pausing the recording. Message received: {}".format(response_pause))
        PRECONDITION("The recording is paused")

        TESTSTEP("Send command 'Jump to Timestamp'")
        EXPECTED("Following event returned: PlaybackJumped")
        testing_timestamp = 428459201
        response_jump_to_timestamp = next_api.execute.jump_to_timestamp(testing_timestamp)
        ptf_asserts.verify(
            bool(response_jump_to_timestamp), True, "Timeout while jumping to timestamp. Message received: {}".format(response_jump_to_timestamp)
            )
        TESTSTEP("Receive command 'Paused'")
        EXPECTED("Following event returned: PlaybackIsPaused")
        response_recv = next_api.websocket.controlbridge.recv(
            receive_channel=controlbridge_Variables.RECEIVE_CHANNEL_PLAYER
        )
        ptf_asserts.verify(bool(response_recv), True, "Timeout raised while sending or receiving. Message received: {}".format(response_recv))

        response_json_jump_to_timestamp = json.loads(response_recv)

        received_event = response_json_jump_to_timestamp["event"]
        expected_event = controlbridge_Variables.EXPECTED_EVENT_PLAYBACK_PAUSED
        ptf_expects.expect_eq(received_event, expected_event, "The received event does not match to the expected event.")

        received_timestamp = response_json_jump_to_timestamp["payload"]["currentTimestamp"]
        expected_timestamp = testing_timestamp
        ptf_expects.expect_eq(
            received_timestamp, expected_timestamp, "The received timestamp does not match to the expected timestamp."
        )
    except Exception as e:
        ptf_expects.fail(e)
    finally:
        TESTSTEP("POSTCONDITION: Close the recording")
        EXPECTED("event: SimulationStateIsIdle")
        recv_close_recording = next_api.execute.close_recording()
        ptf_asserts.verify(bool(recv_close_recording), True, "Timeout while closing the recording. Message received: {}".format(recv_close_recording))
        TESTSTEP("POSTCONDITION: Recording is closed")
